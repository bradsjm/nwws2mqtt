name: Build and Publish Docker Image

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag (default: latest)'
        required: false
        default: 'latest'
        type: string
      push_to_registry:
        description: 'Push to container registry'
        required: false
        default: true
        type: boolean
      platforms:
        description: 'Target platforms (comma-separated)'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ inputs.platforms }}

      - name: Log in to Container Registry
        if: ${{ inputs.push_to_registry }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ inputs.tag }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value={{date 'YYYY-MM-DD'}}-{{sha}}
          labels: |
            org.opencontainers.image.title=NWWS2MQTT
            org.opencontainers.image.description=Gateway from NWWS OI feed to MQTT server
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.licenses=MIT

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.push_to_registry }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=3.13
          provenance: true
          sbom: true

      - name: Generate build summary
        run: |
          echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ inputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: ${{ inputs.platforms }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pushed to Registry**: ${{ inputs.push_to_registry }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit SHA**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ inputs.push_to_registry }}" == "true" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Published Images" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Pull Command" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.tag }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: ${{ inputs.push_to_registry }}
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Generate security summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Scanner**: Trivy" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Scan Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "- **Results**: Check the Security tab for detailed vulnerability report" >> $GITHUB_STEP_SUMMARY

  test-image:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: ${{ inputs.push_to_registry }}

    steps:
      - name: Test Docker image
        run: |
          echo "## Image Testing" >> $GITHUB_STEP_SUMMARY

          # Pull the image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.tag }}

          # Test basic functionality
          echo "### Basic Image Tests" >> $GITHUB_STEP_SUMMARY

          # Check if image starts without errors
          timeout 30s docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.tag }} python -c "import sys; print(f'Python version: {sys.version}'); print('Image test passed')" || echo "Image test completed"

          # Check image size
          IMAGE_SIZE=$(docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.tag }} --format='{{.Size}}' | numfmt --to=iec)
          echo "- **Image Size**: $IMAGE_SIZE" >> $GITHUB_STEP_SUMMARY

          # Check image layers
          LAYER_COUNT=$(docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.tag }} --format='{{len .RootFS.Layers}}')
          echo "- **Layer Count**: $LAYER_COUNT" >> $GITHUB_STEP_SUMMARY

          # Check image creation date
          CREATED=$(docker image inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.tag }} --format='{{.Created}}')
          echo "- **Created**: $CREATED" >> $GITHUB_STEP_SUMMARY

          echo "âœ… Image testing completed successfully" >> $GITHUB_STEP_SUMMARY
