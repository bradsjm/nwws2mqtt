name: Docker CI/CD

on:
  release:
    types: [published]
  pull_request:
    branches: [main, develop]
    paths:
      - 'docker/**'
      - 'src/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/docker-ci.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      pull-requests: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=NWWS2MQTT
            org.opencontainers.image.description=Gateway from NWWS OI feed to MQTT server
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.licenses=MIT
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PYTHON_VERSION=3.13
          provenance: true
          sbom: true

      - name: Test Docker image (PR only)
        if: github.event_name == 'pull_request'
        run: |
          # Build image for testing
          docker build -t test-image:latest -f ./docker/Dockerfile .

          # Basic smoke test
          docker run --rm test-image:latest python -c "
          import sys
          print(f'Python version: {sys.version}')

          # Test imports
          try:
              import nwws
              print('✅ NWWS module imported successfully')
          except ImportError as e:
              print(f'❌ Failed to import NWWS module: {e}')
              sys.exit(1)

          print('✅ Docker image smoke test passed')
          "

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.event_name == 'pull_request' && 'test-image:latest' || format('{0}/{1}:{2}', env.REGISTRY, env.IMAGE_NAME, github.ref_name) }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Comment PR with build results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;

            const comment = `## 🐳 Docker Build Results

            **Status**: ✅ Build completed successfully
            **Commit**: \`${context.sha.substring(0, 7)}\`
            **Platforms**: linux/amd64, linux/arm64

            ### Security Scan
            - Trivy vulnerability scan completed
            - Results uploaded to Security tab

            ### Image Details
            - **Base Image**: Python 3.13 (bookworm-slim)
            - **Multi-stage**: Yes (optimized for size)
            - **Security**: Non-root user, minimal dependencies

            The Docker image has been built and tested successfully! 🚀`;

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: comment
            });

      - name: Generate release summary
        if: github.event_name == 'release'
        run: |
          echo "## 🚀 Release Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Release**: ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Tags" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Start" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Pull the latest release" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Run the container" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d --name nwws2mqtt \\" >> $GITHUB_STEP_SUMMARY
          echo "  -p 8080:8080 \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e MQTT_BROKER_HOST=your-mqtt-broker \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  cleanup:
    runs-on: ubuntu-latest
    needs: build-test
    if: always() && github.event_name == 'pull_request'
    permissions:
      packages: write

    steps:
      - name: Delete PR images
        continue-on-error: true
        run: |
          # Clean up PR-specific images to save storage
          echo "Cleaning up PR images (if any were pushed)"
          # This step can be expanded to actually delete images if needed
          # For now, we rely on GitHub's automatic cleanup policies
