"""
This type stub file was generated by pyright.
"""

import psycopg
from contextlib import contextmanager
from typing import Generator
from psycopg.adapt import Dumper
from psycopg.rows import DictRow
from sqlalchemy import TextClause
from sqlalchemy.engine.base import Connection

"""Database helpers."""
USERNAME_MAPPER = ...
class _FloatDumper(Dumper):
    """Prevent NaN from reaching the database."""
    @staticmethod
    def dump(obj): # -> bytes | None:
        """Opinionated dumper."""
        ...
    


def get_dbconnstr(name, **kwargs) -> str:
    """Create a database connection string/URI.

    Args:
      name (str): the database name to connect to.
      **kwargs: any additional arguments to pass to psycopg.connect
        user (str): the database user to connect as
        host (str): the database host to connect to
        port (int): the database port to connect to
        connect_timeout (int): Connection timeout in seconds, default 30.
    Returns:
      str
    """
    ...

def get_dbconn(database=..., user=..., host=..., port=..., **kwargs): # -> Connection[TupleRow] | None:
    """Helper function with business logic to get a database connection

    Note that this helper could return a read-only database connection if the
    connection to the primary server fails.

    Args:
      database (str,optional): the database name to connect to.
        default: mesosite
      user (str,optional): hard coded user to connect as, default: current user
      host (str,optional): hard coded hostname to connect as,
        default: iemdb.local
      port (int,optional): the TCP port that PostgreSQL is listening
        defaults to 5432
      password (str,optional): the password to use.

    Returns:
      psycopg database connection
    """
    ...

def get_dbconnc(database: str = ..., user: str = ..., host: str = ..., cursor_name: str = ..., **kwargs) -> tuple[psycopg.Connection[DictRow], psycopg.ServerCursor[DictRow]]:
    """Helper function to get a database connection + dict_row cursor.

    Note that this helper could return a read-only database connection if the
    connection to the primary server fails.

    Args:
      database (str,optional): the database name to connect to.
        default: mesosite
      user (str,optional): hard coded user to connect as, default: current user
      host (str,optional): hard coded hostname to connect as,
        default: iemdb.local
      cursor_name (str,optional): name of the cursor to create
      port (int,optional): the TCP port that PostgreSQL is listening
        defaults to 5432
      password (str,optional): the password to use.
    """
    ...

@contextmanager
def get_sqlalchemy_conn(name: str, **kwargs) -> Generator[Connection, None, None]:
    """An auto-disposing sqlalchemy context-manager helper.

    This is used for when we really do not want to manage having pools of
    database connections open.  So this isn't something that is fast!

    Args:
        name (str): the database to connect to, passed to get_dbconnstr
        **kwargs: any additional arguments to pass to get_dbconnstr
    """
    ...

def with_sqlalchemy_conn(name: str, **kwargs): # -> Callable[..., Callable[..., Any]]:
    """Decorator variant of get_sqlalchemy_conn adding `conn=` to the function.

    Usage:
        @with_sqlalchemy_conn("dbname")
        def foo(args, **kwargs, conn=None)

    NOTE: Be sure to commit any transactions before returning from the
    decorated function.

    Args:
        name (str): the database to connect to, passed to get_dbconnstr
        **kwargs: any additional arguments to pass to get_dbconnstr
    """
    ...

def sql_helper(sql: str, **kwargs) -> TextClause:
    """Run string through psycopg.sql machinery destined for sqlalchemy.Allows
    for removal of boilerplate and appease SQL injection detection.

    Example:
        ```python
        sql = "select bah from {table} where {limiter} foo = :bar"
        stm = sql_helper(sql, table='foo', limiter='a = :a and ')
        pd.read_sql(stm, conn, params={'bar': 'baz', 'a': 1})
        ```

    Args:
        sql (str): the SQL statement to process
        **kwargs: arguments needed to build the string.
    """
    ...

