"""
This type stub file was generated by pyright.
"""

"""Shared code between SPC PTS and WPC ERO parsers."""
CONUS_BASETIME = ...
CONUS = ...
THRESHOLD2TEXT = ...
def load_conus_data(valid=...): # -> None:
    """Load up the conus datafile for our perusal"""
    ...

def point_outside_conus(pt): # -> Literal[False]:
    """Is this point safely outside the CONUS bounds."""
    ...

def get_conus_point(pt):
    """Return interpolated point from projection to CONUS."""
    ...

def ensure_outside_conus(ls): # -> LineString:
    """Make sure the start and end of a given line are outside the CONUS."""
    ...

def debug_draw(i, segment): # -> Figure:
    """Draw this for debugging purposes."""
    ...

def condition_segment(segment): # -> list[Any] | list[CoordinateSequence] | list[Any | CoordinateSequence] | None:
    """Do conditioning of the segment."""
    ...

def convert_segments(segments): # -> tuple[list[Any], list[Any], list[Any]]:
    """Figure out what we have here for segments."""
    ...

def compute_start_end_points(linestrings): # -> tuple[list[Any], list[Any]]:
    """Figure out where each line string starts."""
    ...

def winding_logic(linestrings): # -> list[Any]:
    """Make polygons from our linestrings!"""
    ...

def sql_day_collect(prod, txn, day, collect): # -> None:
    """Do database work."""
    ...

def compute_layers(prod): # -> None:
    """Compute the differenced geomtries."""
    ...

def quality_control(prod): # -> None:
    """Do Quality Control work."""
    ...

