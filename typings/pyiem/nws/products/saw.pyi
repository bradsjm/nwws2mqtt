"""
This type stub file was generated by pyright.
"""

from typing import Optional
from pyiem.nws.product import TextProduct

"""Parsing of Storm Prediction Center SAW Product

This does not process the legacy SAW products that did not have LAT...LON
"""
LATLON = ...
NUM_RE = ...
REPLACES_RE = ...
DBTYPES = ...
TYPE2STRING = ...
SPCURL = ...
class SAWProduct(TextProduct):
    """Class representing a SAW Product"""
    def __init__(self, text, utcnow=...) -> None:
        """Constructor

        Args:
          text (str): text to parse
        """
        ...
    
    def find_replaces(self) -> Optional[int]:
        """Figure out what this watch replaces."""
        ...
    
    def find_action(self): # -> int:
        """Figure out if this is an issuance or cancells statement

        Return:
          (int): either ISSUES or CANCELS
        """
        ...
    
    def compute_wfos(self, _txn=...): # -> None:
        """Figure out who is impacted by this watch"""
        ...
    
    def sql(self, txn): # -> None:
        """Do the necessary database work

        Args:
          (psycopg.transaction): a database transaction
        """
        ...
    
    def find_time(self): # -> tuple[None, None] | tuple[Any, Any]:
        """Find the start and end valid time of this watch

        Returns:
          (datetime, datetime): representing the time of this watch
        """
        ...
    
    def find_ww_num(self): # -> int:
        """Find the Weather Watch Number

        Returns:
          (int): The Weather Watch Number
        """
        ...
    
    def is_test(self): # -> Any:
        """Is this a test watch?

        Returns:
          boolean if this SAW is a test or not
        """
        ...
    
    def find_ww_type(self): # -> int:
        """Find the Weather Watch Type

        Returns:
          (int): The Weather Watch Type
        """
        ...
    
    def find_polygon(self): # -> Polygon | None:
        """Search out the text for the LAT...LON polygon

        Returns:
          (str): Well Known Text (WKT) representation
        """
        ...
    
    def get_jabbers(self, uri, _uri2=..., **kwargs): # -> list[Any]:
        """Generate the jabber messages for this product.

        NOTE: In the past, the messages generated here have tripped twitter's
        spam logic, so we are careful to craft unique messages

        NOTE: Since interesting watch information comes within three products
        from SPC, there is some magic in pyWWA/watch_parser.py that awaits
        the arrival of all three.

        Args:
          uri (str): link to IEM Watch Overview page.
          _uri2 (str): unused in this context.
          wwpprod (WWPProduct): the WWPProduct object.
          selprod (SELProduct): the SELProduct object.
        """
        ...
    


def parser(text, utcnow=..., _ugc_provider=..., _nwsli_provider=...): # -> SAWProduct:
    """parser of raw SPC SAW Text

    Args:
      text (str): the raw text to parse
      utcnow (datetime): the current datetime with timezone set!

    Returns:
      SAWProduct instance
    """
    ...

