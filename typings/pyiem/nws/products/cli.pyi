"""
This type stub file was generated by pyright.
"""

from pyiem.nws.product import TextProduct

"""Parser and object storage of information within NWS CLI Product."""
AMPM_COLON = ...
HEADLINE_RE = ...
WIND_RE = ...
REGIMES = ...
COLS = ...
HARDCODED = ...
def update_iemaccess(txn, entry): # -> bool:
    """Update the IEM Access Database."""
    ...

def trace_r(val): # -> str:
    """Convert our value back into meaningful string"""
    ...

def get_number_year(text): # -> ... | float | int | None:
    """Ensure we get a year that makes sense."""
    ...

def get_number(text): # -> ... | float | int | None:
    """Convert a string into a number, preferable a float!"""
    ...

def convert_key(text): # -> Literal['today', 'month', 'fail'] | None:
    """Convert a key value to something we store"""
    ...

def make_tokens(regime, line): # -> list[Any]:
    """Turn a line into tokens based on a regime"""
    ...

def parse_snowfall(regime, lines, data): # -> None:
    """Parse the snowfall data"""
    ...

def parse_precipitation(regime, lines, data): # -> None:
    """Parse the precipitation data"""
    ...

def parse_temperature(prod, regime, lines, data): # -> None:
    """Here we parse a temperature section"""
    ...

def parse_sky_coverage(lines, data): # -> None:
    """Turn section into data."""
    ...

def parse_headline(section): # -> tuple[_Date, Any]:
    """Figure out when this product is valid for"""
    ...

def parse_wind(lines, data): # -> None:
    """Parse any wind information."""
    ...

def sql_data(prod, cursor, data): # -> None:
    """Do an individual data entry."""
    ...

class CLIProduct(TextProduct):
    """
    Represents a CLI Daily Climate Report Product
    """
    def __init__(self, text, utcnow=..., ugc_provider=..., nwsli_provider=...) -> None:
        """constructor"""
        ...
    
    def find_sections(self): # -> list[Any]:
        """Some trickery to figure out if we have multiple reports

        Returns:
          list of text sections
        """
        ...
    
    def compute_diction(self, text): # -> None:
        """Try to determine what we have for a format"""
        ...
    
    def get_jabbers(self, uri, _=...): # -> list[Any]:
        """Override the jabber message formatter"""
        ...
    
    def parse_data(self, section): # -> dict[Any, Any]:
        """Actually do the parsing of this silly format"""
        ...
    
    def sql(self, cursor): # -> None:
        """Do the database update!"""
        ...
    


def parser(text, utcnow=..., ugc_provider=..., nwsli_provider=...): # -> CLIProduct:
    """Parse CLI Text Products.

    Args:
      nwsli_provider (dict): This dictionary provider in the form of the
        `pyiem.network.Table` object should contain additional attributes of
        `access_station` and `access_network` to map back to IEMAccess.
    """
    ...

