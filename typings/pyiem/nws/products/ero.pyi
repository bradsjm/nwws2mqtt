"""
This type stub file was generated by pyright.
"""

from pyiem.nws.product import TextProduct

"""
Eh, I am able to parse the SPC PTS now, so why not add more pain.

Weather Prediction Center Excessive Rainfall Outlook.
"""
RISK_RE = ...
VALID_RE = ...
TEXT2THRESHOLD = ...
def init_days(prod): # -> tuple[Literal[2, 3, 1], dict[int, SPCOutlookCollection]]:
    """Figure out which days this product should have based on the AFOS."""
    ...

def compute_loc(lon, lat, dist, bearing): # -> tuple[Any, Any]:
    """Estimate a lat/lon"""
    ...

def sid_rectify(sid):
    """Ensure it matches our nomenclature."""
    ...

def meat2segment(meat): # -> list[Any]:
    """Convert into a list of points."""
    ...

def jabber_messages(valid, outlook_collections) -> list:
    """Generate a list of Jabber messages to send.

    Args:
        valid (datetime): the valid time of the outlook
        outlook_collections (dict): a list of OutlookCollection objects

    Returns:
        list: a list of Jabber messages [(plain, html, xtradict), ...]
    """
    ...

def compute_wfos(outlook_collections): # -> None:
    """Compute the WFOs affected for each outlook in collection."""
    ...

class ERO(TextProduct):
    """A class representing the polygons and metadata in WPC ERO Product"""
    def __init__(self, text, utcnow=..., ugc_provider=..., nwsli_provider=...) -> None:
        """Constructor

        Args:
          text (string): the raw PTS product that is to be parsed
          utcnow (datetime, optional): in case of ambuigity with time
          ugc_provider (dict, optional): unused in this class
          nwsli_provider (dict, optional): unused in this class
        """
        ...
    
    def get_outlookcollection(self, day): # -> SPCOutlookCollection | None:
        """Returns the OutlookCollection for a given day"""
        ...
    
    def get_outlook(self, category, threshold, day): # -> None:
        """Get an outlook by category and threshold"""
        ...
    
    def draw_outlooks(self): # -> None:
        """For debugging, draw the outlooks on a simple map for inspection!"""
        ...
    
    def find_issue_expire(self): # -> None:
        """
        Determine the period this product is valid for
        """
        ...
    
    def find_outlooks(self): # -> None:
        """Find the outlook sections within the text product!"""
        ...
    
    def sql(self, txn): # -> None:
        """Do database work

        Args:
          txn (psycopg.cursor): database cursor
        """
        ...
    
    def get_jabbers(self, uri, _uri2=...): # -> list[Any]:
        """Wordsmith the Jabber/Twitter Messaging"""
        ...
    


def parser(text, utcnow=..., ugc_provider=..., nwsli_provider=...): # -> ERO:
    """Parse this text!"""
    ...

