"""
This type stub file was generated by pyright.
"""

from pyiem.nws.product import TextProduct, TextProductException

"""A NWS TextProduct that contains VTEC information."""
class VTECProductException(TextProductException):
    """Something we can raise when bad things happen!"""
    ...


class VTECProduct(TextProduct):
    """A TextProduct that contains VTEC information."""
    get_jabbers = ...
    def __init__(self, text, utcnow=..., ugc_provider=..., nwsli_provider=...) -> None:
        """constructor"""
        ...
    
    def sql(self, txn): # -> None:
        """Persist to the database

        Args:
          txn (psycopg.transaction): A database transaction object that we can
            exec() database calls against.

        """
        ...
    
    def do_sql_vtec(self, txn, segment, vtec): # -> None:
        """Persist the non-SBW stuff to the database

        Arguments:
        txn -- A psycopg transaction
        segment -- A TextProductSegment instance
        vtec -- A vtec instance
        """
        ...
    
    def do_sbw_geometry(self, txn, segment, vtec):
        """Storage of Storm Based Warning geometry

        The IEM uses a seperate table for the Storm Based Warning geometries.

        Args:
          txn (psycopg): Database transaction/cursor
          segment (TextProduct.TextProductSegment): Segment
          vtec (pyiem.vtec.VTEC): VTEC instance
        """
        ...
    
    def is_single_action(self): # -> bool:
        """Is this product just 1 VTEC action?"""
        ...
    
    def is_homogeneous(self): # -> bool:
        """Test to see if this product contains just one VTEC event"""
        ...
    
    def get_first_non_cancel_vtec(self): # -> None:
        """Return the first non-CANcel VTEC"""
        ...
    
    def get_first_non_cancel_segment(self): # -> None:
        """Return the first segment that is a non-CAN"""
        ...
    
    def get_skip_con(self): # -> bool:
        """Should this product be skipped from generating jabber messages"""
        ...
    


def parser(text, utcnow=..., ugc_provider=..., nwsli_provider=...): # -> VTECProduct:
    """Helper function that actually converts the raw text and emits an
    VTECProduct instance or returns an exception"""
    ...

