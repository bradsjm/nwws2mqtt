"""
This type stub file was generated by pyright.
"""

from pyiem.nws.product import TextProduct

"""Parse SIGMETs"""
O_LINE1 = ...
O_PAIRS = ...
CS_RE = ...
FROM_RE = ...
OL_RE = ...
AREA_RE = ...
LINE_RE = ...
CIRCLE_RE = ...
dirs = ...
KM_SM = ...
class SIGMET:
    """Data Structure."""
    def __init__(self) -> None:
        """Constructor"""
        ...
    


def figure_expire(ptime, hour, minute):
    """
    Convert something like 0255Z into a full blown time
    """
    ...

def go2lonlat(lon0, lat0, direction, displacement): # -> tuple[float, float]:
    """http://stackoverflow.com/questions/7222382"""
    ...

def locs2lonslats(loc_provider, locstr, geotype, _widthstr, diameterstr): # -> tuple[list[Any], list[Any]]:
    """
    Convert a locstring into a lon lat arrays
    """
    ...

def compute_esol(pts, distance): # -> list[Any]:
    """Figure out the box points given the two points and the distance"""
    ...

class SIGMETProduct(TextProduct):
    """
    Represents a Storm Prediction Center Mesoscale Convective Discussion
    """
    def __init__(self, text, utcnow=..., ugc_provider=..., nwsli_provider=...) -> None:
        """constructor"""
        ...
    
    def sql(self, txn): # -> None:
        """Do SQL related stuff that is required"""
        ...
    
    def compute_time(self, ddhhmi): # -> datetime:
        """Convert this string into a proper date time"""
        ...
    
    def process_ocean(self): # -> None:
        """Process oceananic"""
        ...
    
    def process_SIGC(self): # -> None:
        """Process this type of SIGMET"""
        ...
    
    def get_jabbers(self, uri, _uri2=...): # -> list[Any]:
        """Return the Jabber for this sigmet"""
        ...
    


def parser(text, utcnow=..., ugc_provider=..., nwsli_provider=...): # -> SIGMETProduct:
    """Helper function"""
    ...

