"""
This type stub file was generated by pyright.
"""

from pyiem.nws.product import TextProduct

"""Pilot Reports (PIREP)

This module attempts to process and store atomic data from PIREPs.  These are
encoded products that look like so:

  UBUS01 KMSC 221700
  EAU UA /OV EAU360030/TM 1715/FL350/TP B737/TB CONT LGT-MOD CHOP =
  EHY UA /OV MBW253036 /TM 1729 /FL105 /TP C206 /SK FEW250 /TA M06
  /TB NEG /RM SMTH=

Unfortunately, there is not much documentation of this format and the feed of
this data contains a bunch of formatting errors.

"""
FLIGHT_LEVEL = ...
OV_LATLON = ...
OV_LOCDIR = ...
OV_TWOLOC = ...
OV_OFFSET = ...
DRCT2DIR = ...
class Pirep(TextProduct):
    """Class for parsing and representing PIREPs found in NWS text products."""
    def __init__(self, text, utcnow=..., ugc_provider=..., nwsli_provider=...) -> None:
        """constructor"""
        ...
    
    def parse_reports(self): # -> None:
        """Actually do the parsing of the product that generates the reports
        stored within the self.reports list"""
        ...
    
    def process_pirep(self, report): # -> PilotReport | None:
        """Convert this report text into an actual PIREP object"""
        ...
    
    def compute_loc(self, loc, dist, bearing): # -> tuple[None, None] | tuple[Any, Any]:
        """Figure out the lon/lat for this location"""
        ...
    
    def compute_pirep_valid(self, hour, minute): # -> datetime:
        """Based on what utcnow is set to, compute when this is valid"""
        ...
    
    def sql(self, txn): # -> None:
        """Save the reports to the database via the transaction"""
        ...
    
    def assign_cwsu(self, txn): # -> None:
        """Use this transaction object to assign CWSUs for the pireps"""
        ...
    
    def get_jabbers(self, _uri, _uri2=...): # -> list[Any]:
        """get jabber messages"""
        ...
    


def parser(buf, utcnow=..., ugc_provider=..., nwsli_provider=...): # -> Pirep:
    """A parser implementation"""
    ...

