"""
This type stub file was generated by pyright.
"""

from typing import Tuple
from metar.Metar import Metar
from pyiem.nws.product import TextProduct

"""Encapsulates a text product holding METARs."""
NIL_RE = ...
ERROR_RE = ...
TORNADO_RE = ...
FUNNEL_RE = ...
SA_RE = ...
JABBER_SITES = ...
WIND_ALERTS = ...
WIND_ALERT_THRESHOLD_KTS = ...
WIND_ALERT_THRESHOLD_KTS_BY_ICAO = ...
def normalize_temp(val): # -> int:
    """When temperatures are close to an int, return that int!"""
    ...

def normid(station_id: str) -> str:
    """Normalize a station identifer."""
    ...

def wind_logic(iem, mtr: Metar): # -> None:
    """Hairy logic for now we handle winds."""
    ...

def trace(pobj): # -> ... | None:
    """Convert this precip object to a numeric value"""
    ...

def to_metar(textprod, text) -> Metar:
    """Create a METAR object, if possible"""
    ...

def sanitize(text): # -> str:
    """Clean our text string with METAR data"""
    ...

def wind_message(mtr: Metar) -> Tuple[str, int]:
    """Convert this into a Jabber style message"""
    ...

def over_wind_threshold(mtr: Metar) -> bool:
    """Is this METAR over the wind threshold for alerting"""
    ...

def to_iemaccess(txn, mtr: Metar, iemid: int, tzname: str, force_current_log=..., skip_current=...): # -> tuple[Observation, bool]:
    """Persist parsed data to IEMAccess Database.

    Args:
        txn (psycopg.cursor): database cursor / transaction
        mtr (Metar): Metar instance
        iemid: The iem station identifier
        tzname (str): Local timezone of station.
        force_current_log (boolean): should this ob always go to current_log
        skip_current (boolean): should this ob always skip current table
    """
    ...

class METARCollective(TextProduct):
    """
    A TextProduct containing METAR information
    """
    def __init__(self, text, utcnow=..., ugc_provider=..., nwsli_provider=...) -> None:
        """Constructor

        Args:
          text (string): the raw string to process"""
        ...
    
    def get_jabbers(self, uri, _uri2=...): # -> list[Any]:
        """Make this into jabber messages"""
        ...
    
    def split_and_parse(self): # -> None:
        """Create METAR objects as we find products in the text"""
        ...
    


def parser(text, utcnow=..., ugc_provider=..., nwsli_provider=...): # -> METARCollective:
    """Helper function"""
    ...

