"""
This type stub file was generated by pyright.
"""

from typing import Optional
from pyiem.nws.product import TextProduct

"""Storm Prediction Center PTS Product Parser.

My life was not supposed to end like this, what a brutal format.
"""
DAYRE = ...
DMATCH = ...
THRESHOLD_ORDER = ...
def imgsrc_from_row(row: dict) -> Optional[str]:
    """Compute the SPC image source for a given database row."""
    ...

def compute_times(afos, issue, expire, day): # -> tuple[Any, Any]:
    """Compute actual issue, expire time.

    For the multi-day products, the text product contains a range of dates
    that need translated to an actual issue and expire time.

    Returns
    -------
      issue (datetime)
      expire (datetime)
    """
    ...

def get_day(prod, text): # -> int | None:
    """Figure out which day this is for."""
    ...

def get_segments_from_text(text): # -> list[Any]:
    """Return list of segments for this text."""
    ...

def str2multipolygon(s): # -> MultiPolygon:
    """Convert string PTS data into a polygon.

    Args:
      s (str): the cryptic string that we attempt to make valid polygons from
    """
    ...

def init_days(prod): # -> dict[int, SPCOutlookCollection]:
    """Figure out which days this product should have based on the AFOS."""
    ...

class SPCOutlookCollection:
    """A collection of outlooks for a single 'day'."""
    def __init__(self, issue, expire, day) -> None:
        """Construct."""
        ...
    
    def add_outlook(self, outlook): # -> None:
        """We insert an outlook in an ordered manner."""
        ...
    
    def get_categories(self): # -> list[Any]:
        """Return list of categories covered in this outlook."""
        ...
    
    def difference_geometries(self): # -> None:
        """Do the difference work to figure out actual geometries."""
        ...
    


class SPCOutlook:
    """A class holding what we store for a single outlook."""
    def __init__(self, category, threshold, multipoly) -> None:
        """Create a new outlook.

        Args:
          category (str): the label of this category
          threshold (str): the threshold associated with the category
          multipoly (MultiPolygon): the geometry
        """
        ...
    


class SPCPTS(TextProduct):
    """A class representing the polygons and metadata in SPC PTS Product."""
    def __init__(self, text, utcnow=..., ugc_provider=..., nwsli_provider=...) -> None:
        """Create a new SPCPTS.

        Args:
          text (string): the raw PTS product that is to be parsed
          utcnow (datetime, optional): in case of ambuigity with time
          ugc_provider (dict, optional): unused in this class
          nwsli_provider (dict, optional): unused in this class
        """
        ...
    
    def get_outlookcollection(self, day): # -> SPCOutlookCollection | None:
        """Return the SPCOutlookCollection for a given day."""
        ...
    
    def get_outlook(self, category, threshold, day): # -> None:
        """Get an outlook by category and threshold."""
        ...
    
    def draw_outlooks(self): # -> None:
        """For debugging, draw the outlooks on a simple map for inspection."""
        ...
    
    def set_metadata(self): # -> None:
        """Set some metadata about this product."""
        ...
    
    def find_issue_expire(self): # -> None:
        """Determine the period this product is valid for."""
        ...
    
    def find_outlooks(self): # -> None:
        """Find the outlook sections within the text product."""
        ...
    
    def compute_wfos(self, _txn=...): # -> None:
        """Figure out which WFOs are impacted by this polygon."""
        ...
    
    def sql(self, txn): # -> None:
        """Do database work.

        Args:
          txn (psycopg.cursor): database cursor
        """
        ...
    
    def get_descript_and_url(self): # -> tuple[str, str | Any, str]:
        """Help to convert awips id into strings."""
        ...
    
    def get_jabbers(self, uri, _uri2=...): # -> list[Any]:
        """Wordsmith the Jabber/Twitter Messaging."""
        ...
    


def parser(text, utcnow=..., ugc_provider=..., nwsli_provider=...): # -> SPCPTS:
    """Parse this text."""
    ...

