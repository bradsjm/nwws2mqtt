"""
This type stub file was generated by pyright.
"""

from datetime import datetime
from typing import Optional, Union

"""
Something to store UGC information!
"""
UGC_RE = ...
def ugcs_to_text(ugcs): # -> LiteralString:
    """Convert a list of UGC objects to a textual string"""
    ...

def str2time(text, valid): # -> None:
    """Convert a string that is the UGC product expiration to a valid
    datetime
    @param text string to convert
    @param valid datetime instance
    """
    ...

class UGC:
    """Representation of a single UGC"""
    def __init__(self, state, geoclass, number, name=..., wfos=...) -> None:
        """
        Constructor for UGC instances
        """
        ...
    
    def __str__(self) -> str:
        """Override str()"""
        ...
    
    def __repr__(self): # -> str:
        """Override repr()"""
        ...
    
    def __eq__(self, other) -> bool:
        """Compare this UGC with another"""
        ...
    
    def __ne__(self, other) -> bool:
        """Compare this UGC with another"""
        ...
    
    __hash__ = ...


class UGCProvider:
    """Wrapper around dataframe to provide UGC information."""
    _instance = ...
    def __new__(cls, *args, **kwargs): # -> Self:
        """Singleton, if the price is right."""
        ...
    
    def __init__(self, legacy_dict=..., pgconn=..., valid=...) -> None:
        """Constructor.

        Args:
          legacy_dict(dict, optional): Build based on legacy dictionary.
          pgconn (database engine): something to query to get ugc data.
          valid (timestamp): database version to use.
        """
        ...
    
    def __contains__(self, key: Union[str, UGC]) -> bool:
        """Check if this provider knows about this UGC.

        Args:
            key (str or UGC): the UGC to lookup

        Returns:
            bool
        """
        ...
    
    def get(self, key: Union[str, UGC], is_firewx=...) -> UGC:
        """Return what this provider knows about a given UGC.

        The complication is that we always want something, either a newly
        created `UGC` instance or a new one materialized by the internal
        dataframe stored metadata.

        Args:
            key (str or UGC): the UGC to lookup
            is_firewx (bool): is this a fire weather product, so firewx zones

        Returns:
            UGC instance
        """
        ...
    
    def __getitem__(self, key): # -> UGC:
        """Dictionary access helper."""
        ...
    


def parse(text: str, valid: datetime, ugc_provider: Optional[UGCProvider] = ..., is_firewx: bool = ...) -> tuple[list[UGC], Optional[datetime]]:
    """Return UGC list and expiration time.

    Arguments:
      text (str): text to parse.
      valid (datetime): the text product's valid time.
      ugc_provider (UGCProvider): what will generate UGC instances for us.
      is_firewx (bool): is this product a fire weather product.
    """
    ...

