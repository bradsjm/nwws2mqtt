"""
This type stub file was generated by pyright.
"""

import logging
from contextlib import contextmanager
from datetime import datetime

"""Utility functions for pyIEM package

This module contains utility functions used by various parts of the codebase.
"""
get_dbconn = ...
get_dbconnc = ...
get_dbconnstr = ...
get_sqlalchemy_conn = ...
SEQNUM = ...
LOG = ...
WFO_FOURCHAR = ...
class CustomFormatter(logging.Formatter):
    """A custom log formatter class."""
    def format(self, record): # -> str:
        """Return a string!"""
        ...
    


def ddhhmm2datetime(ddhhmm: str, utcnow: datetime) -> datetime:
    """Do the nasty WMO header timestamp conversion."""
    ...

def web2ldm(url, ldm_product_name, md5_from_name=..., pqinsert=...): # -> bool:
    """Download a URL and insert into LDM.

    Implements a common IEM workflow whereby a web resource is downloaded,
    saved to a temporary file, and then inserted into LDM.

    Args:
      url (str): Web resource to download.
      ldm_product_name (str): LDM product ID to use when inserting.
      md5_from_name (bool): Should `pqinsert -i` be used, which causes LDM
       to compute the MD5 value from the product name instead of data bytes.
      pqinsert (str): pqinsert command.

    Returns:
      bool - success of this workflow.
    """
    ...

def load_geodf(dataname: str, epsg: int = ...): # -> GeoDataFrame:
    """Load a given bundled GeoDataFrame.

    Args:
      dataname (str): The name of the dataset name to load.

    Returns:
      GeoDataFrame
    """
    ...

def convert_value(val, units_in, units_out):
    """DRY Helper to return magnitude of a metpy unit conversion.

    Args:
      val (mixed): something with values.
      units_in (str): What units those values have.
      units_out (str): What values we want with given magnitude.

    Returns:
      mixed: magnitude of val with unit conversion applied
    """
    ...

def c2f(val):
    """Helper to return magnitude of Celcius to Fahrenheit conversion.

    Args:
      val (mixed): something with values in C

    Returns:
      val: something with values in F
    """
    ...

def mm2inch(val):
    """Helper to return magnitude of milimeters to inch conversion.

    Args:
      val (mixed): something with values in mm

    Returns:
      val: something with values in inch
    """
    ...

def html_escape(val):
    """Wrapper around cgi.escape deprecation."""
    ...

def get_test_filepath(name: str) -> str:
    """Helper to get a testing filename, full path."""
    ...

def get_test_file(name): # -> str:
    """Helper to get data for test usage."""
    ...

def logger(name=..., level=...): # -> Logger:
    """Get pyiem's logger with a stream handler attached.

    Args:
      name (str): The name of the logger to get, default pyiem
      level (logging.LEVEL): The log level for this pyiem logget, default is
        WARNING for non interactive sessions, INFO otherwise

    Returns:
      logger instance
    """
    ...

def find_ij(lons, lats, lon, lat): # -> tuple[Any, Any]:
    """Compute the i,j closest cell."""
    ...

def ssw(mixedobj): # -> None:
    """python23 wrapper for sys.stdout.write

    Args:
      mixedobj (str or bytes): what content we want to send
    """
    ...

def ncopen(ncfn, mode=..., timeout=..., _sleep=...): # -> Dataset | None:
    """Safely open netcdf files

    The issue here is that we can only have the following situation for a
    given NetCDF file.
    1.  Only 1 or more readers
    2.  Only 1 appender

    The netcdf is being accessed over NFS and perhaps local disk, so writing
    lock files is problematic.

    Args:
      ncfn (str): The netCDF filename
      mode (str,optional): The netCDF4.Dataset open mode, default 'r'
      timeout (int): The total time in seconds to attempt a read, default 60

    Returns:
      `netCDF4.Dataset` or `None`
    """
    ...

def utc(year=..., month=..., day=..., hour=..., minute=..., second=..., microsecond=...): # -> datetime:
    """Create a datetime instance with tzinfo=timezone.utc

    When no arguments are provided, returns `datetime.now(timezone.utc)`.

    Returns:
      datetime with tzinfo set
    """
    ...

def noaaport_text(text): # -> LiteralString:
    """Make whatever text look like it is NOAAPort Pristine

    Args:
      text (string): the inbound text
    Returns:
      text that looks noaaportish
    """
    ...

def handle_date_err(exp, value, fmt): # -> datetime:
    """Attempt to fix up a date string, when possible."""
    ...

def get_autoplot_context(fdict, cfg, enforce_optional=..., **kwargs):
    """Get the variables out of a dict of strings

    This helper for IEM autoplot gets values out of a dictionary of strings,
    as provided by CGI.  It does some magic to get types right, defaults right
    and so on.  The typical way this is called

        ctx = iemutils.get_context(fdict, get_description())

    Args:
      fdict (dictionary): what was likely provided by `cgi.FieldStorage()`
      cfg (dictionary): autoplot value of get_description
      enforce_optional (bool,optional): Should the `optional` flag be enforced
      rectify_dates (bool,optional): Attempt to fix common date errors like
        June 31.  Default `false`.

    Returns:
      dictionary of variable names and values, with proper types!
    """
    ...

def exponential_backoff(func, *args, **kwargs): # -> None:
    """Exponentially backoff some function until it stops erroring

    Args:
      _ebfactor (int,optional): Optional scale factor, allowing for faster test
    """
    ...

def delete_property(name, cursor=...): # -> None:
    """Delete a property from the database.

    Args:
      name (str): The name of the property to delete
      cursor (psycopg2.cursor): Optional database cursor to use
    """
    ...

def get_properties(cursor=...): # -> dict[Any, Any]:
    """Fetch the properties set

    Returns:
      dict: a dictionary of property names and values (both str)
    """
    ...

def set_property(name, value, cursor=...): # -> None:
    """
    Set a property value in the database.

    Args:
      name (str): The name of the property to set
      value (str,datetime): The value to set
      cursor (psycopg2.cursor): Optional database cursor to use
    """
    ...

def drct2text(drct): # -> Literal['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'] | None:
    """Convert an degree value to text representation of direction.

    Args:
      drct (int or float): Value in degrees to convert to text

    Returns:
      str: String representation of the direction, could be `None`

    """
    ...

def grid_bounds(lons, lats, bounds): # -> list[int]:
    """Figure out indices that we can truncate big grid

    Args:
      lons (np.array): grid lons
      lats (np.array): grid lats
      bounds (list): [x0, y0, x1, y1]

    Returns:
      [x0, y0, x1, y1]
    """
    ...

@contextmanager
def archive_fetch(partialpath: str, localdir: str = ...): # -> Generator[str | None, Any, None]:
    """
    Helper to fetch a file from the archive, by first looking at the filesystem
    and then going to the website.  This returns a filename.  If a temporary
    file is created, it is deleted after the context manager exits.

    Args:
        partialpath (str): Typically a path that starts with /YYYY/mm/dd

    Returns:
        str: filename of the file found and available for use
    """
    ...

