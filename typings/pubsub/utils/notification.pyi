"""
This type stub file was generated by pyright.
"""

from typing import List, Mapping, TextIO
from ..core import INotificationHandler, Listener, Publisher, Topic, TopicManager

"""
Provide an interface class for handling pubsub notification messages, 
and an example class (though very useful in practice) showing how to 
use it. 

Notification messages are generated by pubsub

- if a handler has been configured via pub.addNotificationHandler()
- when pubsub does certain tasks, such as when a listener subscribes to
  or unsubscribes from a topic
  
Derive from this class to handle notification events from 
various parts of pubsub. E.g. when a listener subscribes, 
unsubscribes, or dies, a notification handler, if you 
specified one via pub.addNotificationHandler(), is given the 
relevant information. 

:copyright: Copyright since 2006 by Oliver Schoenborn, all rights reserved.
:license: BSD, see LICENSE_BSD_Simple.txt for details.
"""
class IgnoreNotificationsMixin(INotificationHandler):
    """
    Derive your Notifications handler from this class if your handler
    just wants to be notified of one or two types of pubsub events.
    Then just override the desired methods. The rest of the notifications
    will automatically be ignored.
    """
    def notifySubscribe(self, pubListener: Listener, topicObj: Topic, newSub: bool): # -> None:
        ...
    
    def notifyUnsubscribe(self, pubListener: Listener, topicObj: Topic): # -> None:
        ...
    
    def notifyDeadListener(self, pubListener: Listener, topicObj: Topic): # -> None:
        ...
    
    def notifySend(self, stage: str, topicObj: Topic, pubListener: Listener = ...): # -> None:
        ...
    
    def notifyNewTopic(self, topicObj: Topic, description: str, required: List[str], argsDocs: Mapping[str, str]): # -> None:
        ...
    
    def notifyDelTopic(self, topicName: str): # -> None:
        ...
    


class NotifyByWriteFile(INotificationHandler):
    """
    Print a message to stdout when a notification is received. 
    """
    defaultPrefix = ...
    def __init__(self, fileObj: TextIO = ..., prefix: str = ...) -> None:
        """
        Will write to stdout unless fileObj given. Will use
        defaultPrefix as prefix for each line output, unless prefix
        specified.
        """
        ...
    
    def changeFile(self, fileObj): # -> None:
        ...
    
    def notifySubscribe(self, pubListener: Listener, topicObj: Topic, newSub: bool): # -> None:
        ...
    
    def notifyUnsubscribe(self, pubListener: Listener, topicObj: Topic): # -> None:
        ...
    
    def notifyDeadListener(self, pubListener: Listener, topicObj: Topic): # -> None:
        ...
    
    def notifySend(self, stage: str, topicObj: Topic, pubListener: Listener = ...): # -> None:
        ...
    
    def notifyNewTopic(self, topicObj: Topic, description: str, required: List[str], argsDocs: Mapping[str, str]): # -> None:
        ...
    
    def notifyDelTopic(self, topicName: str): # -> None:
        ...
    


class NotifyByPubsubMessage(INotificationHandler):
    """
    Handle pubsub notification messages by generating
    messages of a 'pubsub.' subtopic. Also provides
    an example of how to create a notification handler.  
    
    Use it by calling::
    
        import pubsub.utils
        pubsub.utils.useNotifyByPubsubMessage()
        ...
        pub.setNotificationFlags(...) # optional
        
    E.g. whenever a listener is unsubscribed, a 'pubsub.unsubscribe'
    message is generated. If you have subscribed a listener of 
    this topic, your listener will be notified of what listener 
    unsubscribed from what topic. 
    """
    topicRoot = ...
    topics = ...
    def __init__(self, topicMgr: TopicManager = ...) -> None:
        ...
    
    def createNotificationTopics(self, topicMgr: TopicManager): # -> None:
        """
        Create the notification topics. The root of the topics created
        is self.topicRoot. The topicMgr is (usually) pub.topicMgr.
        """
        ...
    
    def notifySubscribe(self, pubListener: Listener, topicObj: Topic, newSub: bool): # -> None:
        ...
    
    def notifyUnsubscribe(self, pubListener: Listener, topicObj: Topic): # -> None:
        ...
    
    def notifyDeadListener(self, pubListener: Listener, topicObj: Topic): # -> None:
        ...
    
    def notifySend(self, stage: str, topicObj: Topic, pubListener: Listener = ...): # -> None:
        """
        Stage must be 'pre' or 'post'. Note that any pubsub sendMessage
        operation resulting from this notification (which sends a message; 
        listener could handle by sending another message!) will NOT themselves
        lead to a send notification.
        """
        ...
    
    def notifyNewTopic(self, topicObj: Topic, description: str, required: List[str], argsDocs: Mapping[str, str]): # -> None:
        ...
    
    def notifyDelTopic(self, topicName: str): # -> None:
        ...
    


def useNotifyByPubsubMessage(publisher: Publisher = ..., all: bool = ..., **kwargs): # -> None:
    """
    Will cause all of pubsub's notifications of pubsub "actions" (such as
    new topic created, message sent, listener subscribed, etc) to be sent
    out as messages. Topic will be 'pubsub' subtopics, such as
    'pubsub.newTopic', 'pubsub.delTopic', 'pubsub.sendMessage', etc.

    The 'all' and kwargs args are the same as pubsub's setNotificationFlags(), 
    except that 'all' defaults to True.
    
    The publisher is rarely needed:

    * The publisher must be specfied if pubsub is not installed
      on the system search path (ie from pubsub import ... would fail or
      import wrong pubsub -- such as if pubsub is within wxPython's
      wx.lib package). Then pbuModule is the pub module to use::

        from wx.lib.pubsub import pub
        from wx.lib.pubsub.utils import notification
        notification.useNotifyByPubsubMessage()

    """
    ...

def useNotifyByWriteFile(fileObj: TextIO = ..., prefix: str = ..., publisher: Publisher = ..., all: bool = ..., **kwargs): # -> None:
    """
    Will cause all pubsub notifications of pubsub "actions" (such as new topic created, message sent, listener died
    etc) to be written to specified file (or stdout if none given). The fileObj need only provide a 'write(string)'
    method.
    
    The first two arguments are the same as those of NotifyByWriteFile constructor. The 'all' and kwargs arguments
    are those of pubsub's setNotificationFlags(), except that 'all' defaults to True.  See useNotifyByPubsubMessage()
    for an explanation of pubModule (typically only if pubsub inside wxPython's wx.lib)
    """
    ...

