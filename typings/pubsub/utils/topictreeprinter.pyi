"""This type stub file was generated by pyright."""from typing import TextIOfrom ..core.topictreetraverser import ITopicTreeVisitor"""Output various aspects of topic tree to string or file.:copyright: Copyright since 2006 by Oliver Schoenborn, all rights reserved.:license: BSD, see LICENSE_BSD_Simple.txt for details."""class TopicTreePrinter(ITopicTreeVisitor):    """    Example topic tree visitor that prints a prettified representation    of topic tree by doing a depth-first traversal of topic tree and    print information at each (topic) node of tree. Extra info to be    printed is specified via the 'extra' kwarg. Its value must be a    list of characters, the order determines output order:    - D: print description of topic    - a: print kwarg names only    - A: print topic kwargs and their description    - L: print listeners currently subscribed to topic    E.g. TopicTreePrinter(extra='LaDA') would print, for each topic,    the list of subscribed listeners, the topic's list of kwargs, the    topic description, and the description for each kwarg,        >>> Topic "delTopic"           >> Listeners:              > listener1_2880 (from yourModule)              > listener2_3450 (from yourModule)           >> Names of Message arguments:              > arg1              > arg2           >> Description: whenever a topic is deleted           >> Descriptions of Message arguments:              > arg1: (required) its description              > arg2: some other description    """    allowedExtras = ...    ALL_TOPICS_NAME = ...    def __init__(self, extra=..., width: int = ..., indentStep: int = ..., bulletTopic: str = ..., bulletTopicItem: str = ..., bulletTopicArg: str = ..., fileObj: TextIO = ...) -> None:        """        Topic tree printer will print listeners for each topic only        if printListeners is True. The width will be used to limit        the width of text output, while indentStep is the number of        spaces added each time the text is indented further. The        three bullet parameters define the strings used for each        item (topic, topic items, and kwargs).        """        ...        def getOutput(self): # -> LiteralString:        ...    def printTreeDocs(rootTopic=..., topicMgr=..., **kwargs): # -> None:    """    Print out the topic tree to a file (or file-like object like a    StringIO), starting at rootTopic. If root topic should be root of    whole tree, get it from pub.getDefaultTopicTreeRoot().    The treeVisitor is an instance of pub.TopicTreeTraverser.    Printing the tree docs would normally involve this::        from pubsub import pub        from pubsub.utils.topictreeprinter import TopicTreePrinter        traverser = pub.TopicTreeTraverser( TopicTreePrinter(**kwargs) )        traverser.traverse( pub.getDefaultTopicTreeRoot() )    With printTreeDocs, it looks like this::        from pubsub import pub        from pubsub.utils import printTreeDocs        printTreeDocs()    The kwargs are the same as for TopicTreePrinter constructor:    extra(None), width(70), indentStep(4), bulletTopic, bulletTopicItem,    bulletTopicArg, fileObj(stdout). If fileObj not given, stdout is used.    """    ...