"""
This type stub file was generated by pyright.
"""

from typing import List
from ..core.listener import IListenerExcHandler
from ..core.topicmgr import TopicManager

"""
Some utility classes for exception handling of exceptions raised
within listeners:

- TracebackInfo: convenient way of getting stack trace of latest
  exception raised. The handler can create the instance to retrieve
  the stack trace and then log it, present it to user, etc.
- ExcPublisher: example handler that publishes a message containing
  traceback info

:copyright: Copyright since 2006 by Oliver Schoenborn, all rights reserved.
:license: BSD, see LICENSE_BSD_Simple.txt for details.

"""
class TracebackInfo:
    """
    Represent the traceback information for when an exception is
    raised -- but not caught -- in a listener. The complete
    traceback cannot be stored since this leads to circular
    references (see docs for sys.exc_info()) which keeps
    listeners alive even after the application is no longer
    referring to them.

    Instances of this object are given to listeners of the
    'uncaughtExcInListener' topic as the excTraceback kwarg.
    The instance calls sys.exc_info() to get the traceback
    info but keeps only the following info:

     * self.ExcClass: the class of exception that was raised and not caught
     * self.excArg: the argument given to exception when raised
     * self.traceback: list of quadruples as returned by traceback.extract_tb()

    Normally you just need to call one of the two getFormatted() methods.
    """
    def __init__(self) -> None:
        ...
    
    def getFormattedList(self) -> List[str]:
        """
        Get a list of strings as returned by the traceback module's
        format_list() and format_exception_only() functions.
        """
        ...
    
    def getFormattedString(self) -> str:
        """
        Get a string similar to the stack trace that gets printed
        to stdout by Python interpreter when an exception is not caught.
        """
        ...
    
    def __str__(self) -> str:
        ...
    


class ExcPublisher(IListenerExcHandler):
    """
    Example exception handler that simply publishes the exception traceback.
    The messages will have topic name given by topicUncaughtExc.
    """
    topicUncaughtExc = ...
    def __init__(self, topicMgr: TopicManager = ...) -> None:
        """
        If topic manager is specified, will automatically call init().
        Otherwise, caller must call init() after pubsub imported. See
        pub.setListenerExcHandler().
        """
        ...
    
    def init(self, topicMgr: TopicManager): # -> None:
        """
        Must be called only after pubsub has been imported since this
        handler creates a pubsub topic.
        """
        ...
    
    def __call__(self, listenerID: str, topicObj): # -> None:
        """
        Handle the exception raised by given listener. Send the
        Traceback to all subscribers of topic self.topicUncaughtExc.
        """
        ...
    


