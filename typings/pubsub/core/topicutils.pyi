"""
This type stub file was generated by pyright.
"""

from typing import Sequence, Tuple

"""
Various utilities used by topic-related modules.

:copyright: Copyright since 2006 by Oliver Schoenborn, all rights reserved.
:license: BSD, see LICENSE_BSD_Simple.txt for details.

"""
__all__ = []
UNDERSCORE = ...
ALL_TOPICS = ...
class WeakNone:
    """
    Pretend to be a weak reference to nothing. Used by ArgsInfos to
    refer to parent when None so no if-else blocks needed.
    """
    def __call__(self): # -> None:
        ...
    


def smartDedent(paragraph: str) -> str:
    """
    Dedent paragraph using textwrap.dedent(), but properly dedents
    even if the first line of paragraph does not contain blanks.
    This handles the case where a user types a documentation string as
        '''A long string spanning
        several lines.'''
    """
    ...

_validNameRE = ...
def validateName(topicName: str): # -> None:
    """Raise TopicNameError if nameTuple not valid as topic name."""
    class topic:
        ...
    
    

def stringize(topicName: Sequence[str]) -> str:
    """
    If topicName is a string, just return it
    as is. If it is a topic definition object (ie an object that has
    'msgDataSpec' as data member), return the dotted name of corresponding
    topic. Otherwise, assume topicName is a tuple and convert it to to a
    dotted name i.e. ('a','b','c') => 'a.b.c'. Empty name is not allowed
    (ValueError). The reverse operation is tupleize(topicName).
    """
    ...

def tupleize(topicName: str) -> Tuple[str, ...]:
    """
    If topicName is a tuple of strings, just return it as is. Otherwise,
    convert it to tuple, assuming dotted notation used for topicName. I.e.
    'a.b.c' => ('a','b','c'). Empty topicName is not allowed (ValueError).
    The reverse operation is stringize(topicNameTuple).
    """
    ...

