"""
This type stub file was generated by pyright.
"""

from types import ModuleType
from typing import Any, Callable, Mapping, Sequence
from .callables import AUTO_TOPIC as _AUTO_ARG, CallArgsInfo, UserListener
from .annotations import annotationType

"""
Top-level functionality related to message listeners.

:copyright: Copyright since 2006 by Oliver Schoenborn, all rights reserved.
:license: BSD, see LICENSE_BSD_Simple.txt for details.
"""
__all__ = ['Listener', 'IListenerExcHandler', 'ListenerValidator']
@annotationType
class Topic:
    ...


@annotationType
class Listener:
    """Wrapper of a UserListener"""
    ...


class IListenerExcHandler:
    """
    Interface class base class for any handler given to pub.setListenerExcHandler()
    Such handler is called whenever a listener raises an exception during a
    pub.sendMessage(). Example::

        from pubsub import pub

        class MyHandler(pub.IListenerExcHandler):
            def __call__(self, listenerID, topicObj):
                ... do something with listenerID ...

        pub.setListenerExcHandler(MyHandler())

    Without an exception handler, the sendMessage() will fail.
    """
    def __call__(self, listenerID: str, topicObj: Topic):
        ...
    


class Listener:
    """
    Wraps a callable (UserListener) so it can be stored by weak reference and introspected
    to verify that it adheres to a topic's MDS.

    A Listener instance has the same hash value as the callable that it wraps.

    Callables that have 'argName=pub.AUTO_TOPIC' as a kwarg will
    be given the Topic object for the message sent by sendMessage().
    Such a Listener will have wantsTopicObjOnCall() True.

    Callables that have a '** kargs' argument will receive all message data, not just that for
    the topic they are subscribed to. Such a listener will have wantsAllMessageData() True.
    """
    AUTO_TOPIC = _AUTO_ARG
    def __init__(self, callable_obj: UserListener, argsInfo: CallArgsInfo, curriedArgs: Mapping[str, Any] = ..., onDead: Callable[[Listener], None] = ...) -> None:
        """
        Use callable_obj as a listener of topicName. The argsInfo is the
        return value from a Validator, ie an instance of callables.CallArgsInfo.
        If given, the onDead will be called with self as parameter, if/when
        callable_obj gets garbage collected (callable_obj is held only by weak
        reference).
        """
        ...
    
    def name(self) -> str:
        """
        Return a human readable name for listener, based on the
        listener's type name and its id (as obtained from id(listener)). If
        caller just needs name based on type info, specify instance=False.
        Note that the listener's id() was saved at construction time (since
        it may get garbage collected at any time) so the return value of
        name() is not necessarily unique if the callable has died (because
        id's can be re-used after garbage collection).
        """
        ...
    
    def typeName(self) -> str:
        """
        Get a type name for the listener. This is a class name or
        function name, as appropriate.
        """
        ...
    
    def module(self) -> ModuleType:
        """
        Get the module in which the callable was defined.
        """
        ...
    
    def getCallable(self) -> UserListener:
        """
        Get the listener that was given at initialization. Note that
        this could be None if it has been garbage collected (e.g. if it was
        created as a wrapper of some other callable, and not stored
        locally).
        """
        ...
    
    def isDead(self) -> bool:
        """Return True if this listener died (has been garbage collected)"""
        ...
    
    def wantsTopicObjOnCall(self) -> bool:
        """True if this listener wants topic object: it has a arg=pub.AUTO_TOPIC"""
        ...
    
    def wantsAllMessageData(self) -> bool:
        """True if this listener wants all message data: it has a ** kwargs argument"""
        ...
    
    def setCurriedArgs(self, **curriedArgs): # -> None:
        """
        Curry the wrapped listener so it appears to *not* have list(curriedArgs) among its parameters.
        The curriedArgs key-value pairs will be given to wrapped listener at call time.
        """
        ...
    
    def __eq__(self, rhs: Listener) -> bool:
        """
        Compare for equality to rhs. This returns true if rhs has our id id(rhs) is same as
        id(self) or id(callable in self).
        """
        ...
    
    def __ne__(self, rhs: Listener) -> bool:
        """Counterpart to __eq__ MUST be defined... equivalent to 'not (self == rhs)'."""
        ...
    
    def __hash__(self) -> int:
        """
        Hash is an optimization for dict/set searches, it need not return different numbers for every different object.
        """
        ...
    
    def __str__(self) -> str:
        """String rep is the callable"""
        ...
    
    def __call__(self, kwargs: Mapping[str, Any], actualTopic: Topic, allKwargs: Mapping[str, Any] = ...): # -> Literal[True]:
        """
        Call the listener with **kwargs. Note that it raises RuntimeError
        if listener is dead. Should always return True (False would require
        the callable_obj be dead but self hasn't yet been notified of it...).
        """
        ...
    


class ListenerValidator:
    """
    Validates listeners. It checks whether the listener given to
    validate() method complies with required and optional arguments
    specified for topic.

    Do not accept any required args or *args; accept any **kwarg,
    and require that the Listener have at least all the kwargs (can
    have extra) of Topic.
    """
    def __init__(self, topicArgs: Sequence[str], topicKwargs: Sequence[str]) -> None:
        """
        :param topicArgs: list of argument names that will be required when sending
            a message to listener. Hence order of items in topicArgs matters.
        :param topicKwargs: list of argument names that will be optional, ie given as keyword arguments
            when sending a message to listener. The list is unordered. """
        ...
    
    def validate(self, listener: UserListener, curriedArgNames: Sequence[str] = ...) -> CallArgsInfo:
        """
        Validate that listener (with, optionally, given curried parameters) satisfies the requirements of
        being a topic listener.

        :param listener: the callable to validate
        :param curriedArgNames: the list of parameter names to treat as curried
        :returns: a CallArgsInfo object containing information about the listener's call arguments, such as
            whether listener wants topic name (signified by a kwarg value = AUTO_TOPIC in listener signature).
        :raises ListenerMismatchError: if listener not usable for topic
        """
        ...
    
    def isValid(self, listener: UserListener, curriedArgNames: Sequence[str] = ...) -> bool:
        """Same as validate() but returns True/False instead of raising an exception."""
        ...
    


