"""
This type stub file was generated by pyright.
"""

from typing import Any, List, Sequence, TextIO, Tuple, Union
from .topicargspec import ArgSpecGiven, ArgsDocs
from .topicobj import Topic

"""
:copyright: Copyright since 2006 by Oliver Schoenborn, all rights reserved.
:license: BSD, see LICENSE_BSD_Simple.txt for details.
"""
class ITopicDefnProvider:
    """
    All topic definition providers added via pub.addTopicDefnProvider()
    must have this interface. Derived classes must override the getDefn(),
    getTreeDoc() and topicNames() methods.
    """
    def getDefn(self, topicNameTuple: Sequence[str]) -> Tuple[str, ArgSpecGiven]:
        """
        Must return a pair (string, ArgSpecGiven) for given topic.
        The first item is a description for topic, the second item
        contains the message data specification (MDS). Note topic name
        is in tuple format ('a', 'b', 'c') rather than 'a.b.c'.
        """
        ...
    
    def topicNames(self) -> List[str]:
        """
        Return an iterator over topic names available from this provider.
        Note that the topic names should be in tuple rather than dotted-string
        format so as to be compatible with getDefn().
        """
        ...
    
    def getTreeDoc(self) -> str:
        """Get the docstring for the topic tree."""
        ...
    
    def __iter__(self): # -> Iterator[str]:
        """Same as self.topicNames(), do NOT override."""
        ...
    


SPEC_METHOD_NAME = ...
class ITopicDefnDeserializer:
    """
    Interface class for all topic definition de-serializers that can be
    accepted by TopicDefnProvider. A deserializer
    creates a topic tree from something such as file, module, or string.
    """
    class TopicDefn:
        """
        Encapsulate date for a topic definition. Used by
        getNextTopic().
        """
        def __init__(self, nameTuple: Sequence[str], description: str, argsDocs: ArgsDocs, required: Sequence[str]) -> None:
            ...
        
        def isComplete(self): # -> bool:
            ...
        
    
    
    def getTreeDoc(self) -> str:
        """Get the docstring for the topic tree."""
        ...
    
    def getNextTopic(self) -> TopicDefn:
        """
        Get the next topic definition available from the data. The return
        must be an instance of TopicDefn. Must return None when no topics
        are left.
        """
        ...
    
    def doneIter(self): # -> None:
        """
        Called automatically by TopicDefnProvider once
        it considers the iteration completed. Override this only if
        deserializer needs to take action, such as closing a file.
        """
        ...
    
    def resetIter(self): # -> None:
        """
        Called by the TopicDefnProvider if it needs to
        restart the topic iteration. Override this only if special action needed,
        such as resetting a file pointer to beginning of file.
        """
        ...
    


class TopicDefnDeserialClass(ITopicDefnDeserializer):
    """
    Convert a nested class tree as a topic definition tree. Format: the class
    name is the topic name, its doc string is its description. The topic's
    message data specification is determined by inspecting a class method called
    the same as SPEC_METHOD_NAME. The doc string of that method is parsed to
    extract the description for each message data.
    """
    def __init__(self, pyClassObj: type = ...) -> None:
        """
        If pyClassObj is given, it is an object that contains nested
        classes defining root topics; the root topics contain nested
        classes defining subtopics; etc. The class name is the topic
        name, and the class docstring is the topic documentation string.
        """
        ...
    
    def getTreeDoc(self) -> str:
        ...
    
    def getNextTopic(self) -> ITopicDefnDeserializer.TopicDefn:
        ...
    
    def resetIter(self): # -> None:
        ...
    
    def getDefinedTopics(self) -> List[str]:
        ...
    


class TopicDefnDeserialModule(ITopicDefnDeserializer):
    """
    Deserialize a module containing Python source code defining a topic tree.
    This loads the module and gives it to an instance of TopicDefnDeserialClass.
    """
    def __init__(self, moduleName: str, searchPath: Sequence[str] = ...) -> None:
        """
        Load the given named module, searched for in searchPath or, if not
        specified, in sys.path. Give it to a TopicDefnDeserialClass.
        """
        ...
    
    def getTreeDoc(self) -> str:
        ...
    
    def getNextTopic(self) -> ITopicDefnDeserializer.TopicDefn:
        ...
    
    def doneIter(self): # -> None:
        ...
    
    def resetIter(self): # -> None:
        ...
    
    def getDefinedTopics(self) -> List[str]:
        ...
    


class TopicDefnDeserialString(ITopicDefnDeserializer):
    """
    Deserialize a string containing Python source code defining a topic tree.
    The string has the same format as expected by TopicDefnDeserialModule.
    """
    def __init__(self, source: str) -> None:
        """
        This just saves the string into a temporary file created in
        os.getcwd(), and the rest is delegated to TopicDefnDeserialModule.
        The temporary file (module -- as well as its byte-compiled
        version) will be deleted when the doneIter() method is called.
        """
        ...
    
    def getTreeDoc(self) -> str:
        ...
    
    def getNextTopic(self) -> ITopicDefnDeserializer.TopicDefn:
        ...
    
    def doneIter(self): # -> None:
        ...
    
    def resetIter(self): # -> None:
        ...
    
    def getDefinedTopics(self) -> List[str]:
        ...
    


TOPIC_TREE_FROM_MODULE = ...
TOPIC_TREE_FROM_STRING = ...
TOPIC_TREE_FROM_CLASS = ...
class TopicDefnProvider(ITopicDefnProvider):
    """
    Default implementation of the ITopicDefnProvider API. This
    implementation accepts several formats for the topic tree
    source data and delegates to a registered ITopicDefnDeserializer
    that converts source data into topic definitions.

    This provider is instantiated automatically by
    ``pub.addTopicDefnProvider(source, format)``
    when source is *not* an ITopicDefnProvider.

    Additional de-serializers can be registered via registerTypeForImport().
    """
    _typeRegistry = ...
    def __init__(self, source: Any, format: str, **providerKwargs) -> None:
        """
        Find the correct de-serializer class from registry for the given
        format; instantiate it with given source and providerKwargs; get
        all available topic definitions.
        """
        ...
    
    def getDefn(self, topicNameTuple: Sequence[str]) -> Tuple[str, ArgSpecGiven]:
        ...
    
    def topicNames(self) -> Sequence[str]:
        ...
    
    def getTreeDoc(self) -> str:
        ...
    
    @classmethod
    def registerTypeForImport(cls, typeName: str, providerClassObj: type): # -> None:
        """
        If a new type of importer is defined for topic definitions, it
        can be registered with pubsub by providing a name for the new
        importer (typeName), and the class to instantiate when
        pub.addTopicDefnProvider(obj, typeName) is called. For instance, ::

            from pubsub.core.topicdefnprovider import ITopicDefnDeserializer
            class SomeNewImporter(ITopicDefnDeserializer):
                ...
            TopicDefnProvider.registerTypeForImport('some name', SomeNewImporter)
            # will instantiate SomeNewImporter(source)
            pub.addTopicDefnProvider(source, 'some name')
        """
        ...
    
    @classmethod
    def initTypeRegistry(cls): # -> None:
        ...
    


defaultTopicTreeSpecHeader = ...
defaultTopicTreeSpecFooter = ...
def exportTopicTreeSpec(moduleName: str = ..., rootTopic: Union[Topic, str] = ..., bak: str = ..., moduleDoc: str = ...): # -> None:
    """
    Using TopicTreeSpecPrinter, exports the topic tree rooted at rootTopic to a
    Python module (.py) file. This module will define module-level classes
    representing root topics, nested classes for subtopics etc. Returns a string
    representing the contents of the file. Parameters:

        - If moduleName is given, the topic tree is written to moduleName.py in
          os.getcwd(). By default, it is first backed up, it it already exists,
          using bak as the filename extension. If bak is None, existing module file
          gets overwritten.
        - If rootTopic is specified, the export only traverses tree from
          corresponding topic. Otherwise, complete tree, using
          pub.getDefaultTopicTreeRoot() as starting  point.
        - The moduleDoc is the doc string for the module ie topic tree.
    """
    ...

class TopicTreeSpecPrinter:
    """
    Helper class to print the topic tree using the Python class
    syntax. The "printout" can be sent to any file object (object that has a
    write() method). If printed to a module, the module can be imported and
    given to pub.addTopicDefnProvider(module, 'module'). Importing the module
    also provides code completion of topic names (rootTopic.subTopic can be
    given to any pubsub function requiring a topic name).
    """
    INDENT_CH = ...
    def __init__(self, rootTopic: Union[str, Topic] = ..., fileObj: TextIO = ..., width: int = ..., indentStep: int = ..., treeDoc: str = ..., footer: str = ...) -> None:
        """
        For formatting, can specify the width of output, the indent step, the
        header and footer to print to override defaults. The destination is fileObj;
        if none is given, then sys.stdout is used. If rootTopic is given, calls
        writeAll(rootTopic) at end of __init__.
        """
        ...
    
    def getOutput(self) -> str:
        """
        Each line that was sent to fileObj was saved in a list; returns a
        string which is ``'\\n'.join(list)``.
        """
        ...
    
    def writeAll(self, topicObj: Topic): # -> None:
        """
        Traverse each topic of topic tree, starting at topicObj, printing
        each topic definition as the tree gets traversed.
        """
        ...
    


