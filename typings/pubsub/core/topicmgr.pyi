"""
This type stub file was generated by pyright.
"""

from typing import Any, List, Sequence, Tuple
from .callables import UserListener
from .topicargspec import ArgSpecGiven
from .topicobj import Topic
from .listener import IListenerExcHandler
from .topicdefnprovider import ITopicDefnProvider
from .notificationmgr import INotificationHandler

"""
Code related to the concept of topic tree and its management: creating
and removing topics, getting info about a particular topic, etc.

:copyright: Copyright since 2006 by Oliver Schoenborn, all rights reserved.
:license: BSD, see LICENSE_BSD_Simple.txt for details.
"""
__all__ = ['TopicManager', 'TopicNameError', 'TopicDefnError']
ARGS_SPEC_ALL = ...
ARGS_SPEC_NONE = ...
class TreeConfig:
    """
    Each topic tree has its own topic manager and configuration,
    such as notification and exception handling.
    """
    def __init__(self, notificationHandler: INotificationHandler = ..., listenerExcHandler: IListenerExcHandler = ...) -> None:
        ...
    


class TopicManager:
    """
    Manages the registry of all topics and creation/deletion
    of topics.

    Note that any method that accepts a topic name can accept it in the
    'dotted' format such as ``'a.b.c.'`` or in tuple format such as
    ``('a', 'b', 'c')``. Any such method will raise a ValueError
    if name not valid (empty, invalid characters, etc).
    """
    TOPIC_SPEC_NOT_SPECIFIED = ...
    TOPIC_SPEC_ALREADY_CREATED = ...
    TOPIC_SPEC_ALREADY_DEFINED = ...
    def __init__(self, treeConfig: TreeConfig = ...) -> None:
        """
        The optional treeConfig is an instance of TreeConfig, used to
        configure the topic tree such as notification settings, etc. A
        default config is created if not given. This method should only be
        called by an instance of Publisher (see Publisher.getTopicManager()).
        """
        ...
    
    def getRootAllTopics(self) -> Topic:
        """
        Get the topic that is parent of all root (ie top-level) topics,
        for default TopicManager instance created when this module is imported.
        Some notes:

        - "root of all topics" topic satisfies isAll()==True, isRoot()==False,
          getParent() is None;
        - all root-level topics satisfy isAll()==False, isRoot()==True, and
          getParent() is getDefaultTopicTreeRoot();
        - all other topics satisfy neither.
        """
        ...
    
    def addDefnProvider(self, providerOrSource: Any, format=...) -> ITopicDefnProvider:
        """
        Register a topic definition provider. After this method is called, whenever a topic must
        be created, the first definition provider that has a definition for the required topic
        is used to instantiate the topic.

        If providerOrSource is an instance of ITopicDefnProvider, register
        it as a provider of topic definitions. Otherwise, register a new
        instance of TopicDefnProvider(providerOrSource, format). In that case,
        if format is not given, it defaults to TOPIC_TREE_FROM_MODULE. Either
        way, returns the instance of ITopicDefnProvider registered.
        """
        ...
    
    def clearDefnProviders(self): # -> None:
        """Remove all registered topic definition providers"""
        ...
    
    def getNumDefnProviders(self) -> int:
        """Get how many topic definitions providers are registered."""
        ...
    
    def getTopic(self, name: str, okIfNone: bool = ...) -> Topic:
        """
        Get the Topic instance for the given topic name. By default, raises
        an TopicNameError exception if a topic with given name doesn't exist. If
        okIfNone=True, returns None instead of raising an exception.
        """
        ...
    
    def getOrCreateTopic(self, name: str, protoListener: UserListener = ...) -> Topic:
        """
        Get the Topic instance for topic of given name, creating it
        (and any of its missing parent topics) as necessary. Pubsub
        functions such as subscribe() use this to obtain the Topic object
        corresponding to a topic name.

        The name can be in dotted or string format (``'a.b.'`` or ``('a','b')``).

        This method always attempts to return a "complete" topic, i.e. one
        with a Message Data Specification (MDS). So if the topic does not have
        an MDS, it attempts to add it. It first tries to find an MDS
        from a TopicDefnProvider (see addDefnProvider()). If none is available,
        it attempts to set it from protoListener, if it has been given. If not,
        the topic has no MDS.

        Once a topic's MDS has been set, it is never again changed or accessed
        by this method.

        Examples::

            # assume no topics exist
            # but a topic definition provider has been added via
            # pub.addTopicDefnProvider() and has definition for topics 'a' and 'a.b'

            # creates topic a and a.b; both will have MDS from the defn provider:
            t1 = topicMgr.getOrCreateTopic('a.b')
            t2 = topicMgr.getOrCreateTopic('a.b')
            assert(t1 is t2)
            assert(t1.getParent().getName() == 'a')

            def proto(req1, optarg1=None): pass
            # creates topic c.d with MDS based on proto; creates c without an MDS
            # since no proto for it, nor defn provider:
            t1 = topicMgr.getOrCreateTopic('c.d', proto)

        The MDS can also be defined via a call to subscribe(listener, topicName),
        which indirectly calls getOrCreateTopic(topicName, listener).
        """
        ...
    
    def isTopicInUse(self, name: str) -> bool:
        """
        Determine if topic 'name' is in use. True if a Topic object exists
        for topic name (i.e. message has already been sent for that topic, or a
        least one listener subscribed), false otherwise. Note: a topic may be in use
        but not have a definition (MDS and docstring); or a topic may have a
        definition, but not be in use.
        """
        ...
    
    def hasTopicDefinition(self, name: str) -> bool:
        """
        Determine if there is a definition avaiable for topic 'name'. Return
        true if there is, false otherwise. Note: a topic may have a
        definition without being in use, and vice versa.
        """
        ...
    
    def checkAllTopicsHaveMDS(self): # -> None:
        """
        Check that all topics that have been created for their MDS.
        Raise a TopicDefnError if one is found that does not have one.
        """
        ...
    
    def delTopic(self, name: str) -> bool:
        """
        Delete the named topic, including all sub-topics. Returns False
        if topic does not exist; True otherwise. Also unsubscribe any listeners
        of topic and all subtopics.
        """
        ...
    
    def getTopicsSubscribed(self, listener: UserListener) -> List[Topic]:
        """
        Get the list of Topic objects that have given listener
        subscribed. Note: the listener can also get messages from any
        sub-topic of returned list.
        """
        ...
    
    def clearTree(self): # -> None:
        """Remove every topic from the topic tree"""
        ...
    


def validateNameHierarchy(topicTuple: Tuple[Topic, ...]): # -> None:
    """
    Check that names in topicTuple are valid: no spaces, not empty.
    Raise ValueError if fails check. E.g. ('',) and ('a',' ') would
    both fail, but ('a','b') would be ok.
    """
    ...

class _MasterTopicDefnProvider:
    """
    Stores a list of topic definition providers. When queried for a topic
    definition, queries each provider (registered via addProvider()) and
    returns the first complete definition provided, or (None,None).

    The providers must follow the ITopicDefnProvider API.
    """
    def __init__(self, treeConfig: TreeConfig) -> None:
        ...
    
    def addProvider(self, provider): # -> None:
        """Add given provider IF not already added. """
        ...
    
    def clear(self): # -> None:
        """Remove all providers added."""
        ...
    
    def getNumProviders(self) -> int:
        """Return how many providers added."""
        ...
    
    def getDefn(self, topicNameTuple: Sequence[str]) -> Tuple[str, ArgSpecGiven]:
        """
        Returns a pair (docstring, MDS) for the topic. The first item is
        a string containing the topic's "docstring", i.e. a description string
        for the topic, or None if no docstring available for the topic. The
        second item is None or an instance of ArgSpecGiven specifying the
        required and optional message data for listeners of this topic.
        """
        ...
    
    def isDefined(self, topicNameTuple: Sequence[str]) -> bool:
        """
        Returns True only if a complete definition exists, ie topic
        has a description and a complete message data specification (MDS).
        """
        ...
    


