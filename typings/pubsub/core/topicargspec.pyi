"""
This type stub file was generated by pyright.
"""

from typing import Any, Dict, List, Mapping, Sequence as Seq, Tuple
from .annotations import annotationType
from .listener import UserListener

"""
Definitions related to message data specification.

:copyright: Copyright since 2006 by Oliver Schoenborn, all rights reserved.
:license: BSD, see LICENSE_BSD_Simple.txt for details.
"""
ArgsDocs = Dict[str, str]
MsgData = Mapping[str, Any]
def verifyArgsDifferent(allArgs, allParentArgs, topicName): # -> None:
    """
    Verify that allArgs does not contain any of allParentArgs. Raise
    MessageDataSpecError if fail.
    """
    ...

def verifySubset(all, sub, topicName, extraMsg=...): # -> None:
    """
    Verify that sub is a subset of all for topicName. Raise
    MessageDataSpecError if fail.
    """
    ...

def topicArgsFromCallable(_callable: UserListener, ignoreArgs: Seq[str] = ...) -> Tuple[ArgsDocs, List[str]]:
    """
    Get the topic message data names and list of those that are required,
    by introspecting given callable. Returns a pair, (args, required)
    where args is a dictionary of allowed message data names vs docstring,
    and required states which ones are required rather than optional.
    """
    ...

class ArgSpecGiven:
    """
    The message data specification (MDS) for a topic.

    This consists of each argument name that listener should have in its
    signature, plus which ones are required in any sendMessage(), and a
    documentation string for each argument. This instance will be transformed
    into an ArgsInfo object which is basically a superset of that information,
    needed to ensure that the arguments specifications satisfy
    pubsub policies for chosen API version.
    """
    SPEC_GIVEN_NONE = ...
    SPEC_GIVEN_ALL = ...
    def __init__(self, argsDocs: ArgsDocs = ..., reqdArgs: Seq[str] = ...) -> None:
        ...
    
    def setAll(self, allArgsDocs: ArgsDocs, reqdArgs: Seq[str] = ...): # -> None:
        ...
    
    def isComplete(self) -> bool:
        """Returns True if the definition is usable, false otherwise."""
        ...
    
    def getOptional(self) -> List[str]:
        """Get the list of optional arguments"""
        ...
    
    def __str__(self) -> str:
        ...
    


class SenderMissingReqdMsgDataError(RuntimeError):
    """
    Raised when a sendMessage() is missing arguments tagged as
    'required' by pubsub topic of message.
    """
    def __init__(self, topicName: str, argNames: Seq[str], missing: Seq[str]) -> None:
        ...
    


class SenderUnknownMsgDataError(RuntimeError):
    """
    Raised when a sendMessage() has arguments not listed among the topic's
    message data specification (MDS).
    """
    def __init__(self, topicName: str, argNames: Seq[str], extra: Seq[str]) -> None:
        ...
    


@annotationType
class ArgsInfo:
    ...


class ArgsInfo:
    """
    Encode the Message Data Specification (MDS) for a given
    topic. ArgsInfos form a tree identical to that of Topics in that
    ArgInfos have a reference to their parent and children ArgInfos,
    created for the parent and children topics.

    The only difference
    between an ArgsInfo and an ArgSpecGiven is that the latter is
    what "user thinks is ok" whereas former has been validated:
    the specification for this topic is a strict superset of the
    specification of its parent, and a strict subset of the
    specification of each of its children. Also, the instance
    can be used to check validity and filter arguments.

    The MDS can be created "empty", ie "incomplete", meaning it cannot
    yet be used to validate listener subscriptions to topics.
    """
    SPEC_MISSING = ...
    SPEC_COMPLETE = ...
    def __init__(self, topicNameTuple: Seq[str], specGiven: ArgSpecGiven, parentArgsInfo: ArgsInfo) -> None:
        ...
    
    def isComplete(self) -> bool:
        ...
    
    def getArgs(self) -> List[str]:
        ...
    
    def numArgs(self) -> int:
        ...
    
    def getReqdArgs(self) -> List[str]:
        ...
    
    def getOptArgs(self) -> List[str]:
        ...
    
    def getArgsDocs(self) -> ArgsDocs:
        ...
    
    def setArgsDocs(self, docs: ArgsDocs): # -> None:
        """docs is a mapping from arg names to their documentation"""
        ...
    
    def check(self, msgData: MsgData): # -> None:
        """
        Check that the message arguments given satisfy the topic message
        data specification (MDS).
        :param msgData: the topic message data to check for validity
        :raise SenderMissingReqdMsgDataError: if some required args are missing or not known
        :raise SenderUnknownMsgDataError: if some optional args are unknown.
        """
        ...
    
    def filterArgs(self, msgData: MsgData) -> MsgData:
        """
        Returns a dict which contains only those items of msgData which are defined for topic.
        E.g. if msgData is {a:1, b:'b'} and topic arg spec is ('a',) then return {a:1}. The returned
        dict is valid only if check(msgData) was called (or check(superset of msgData) was called).

        :param msgData: the topic message data to filter
        """
        ...
    
    def hasSameArgs(self, *argNames: Seq[str]) -> bool:
        """
        Returns true if self has all the message arguments given, no
        more and no less. Order does not matter. So if getArgs()
        returns ('arg1', 'arg2') then self.hasSameArgs('arg2', 'arg1')
        will return true.
        """
        ...
    
    def hasParent(self, argsInfo: ArgsInfo) -> bool:
        """return True if self has argsInfo object as parent"""
        ...
    
    def getCompleteAI(self) -> ArgsInfo:
        """
        Get the closest arg spec, starting from self and moving to parent,
        that is complete. So if self.isComplete() is True, then returns self,
        otherwise returns parent (if parent.isComplete()), etc.
        """
        ...
    
    def updateAllArgsFinal(self, topicDefn: ArgSpecGiven): # -> None:
        """
        This can only be called once, if the construction was done
        with ArgSpecGiven.SPEC_GIVEN_NONE
        """
        ...
    


