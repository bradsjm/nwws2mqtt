"""
This type stub file was generated by pyright.
"""

from enum import IntEnum
from .topicobj import Topic

"""

:copyright: Copyright since 2006 by Oliver Schoenborn, all rights reserved.
:license: BSD, see LICENSE_BSD_Simple.txt for details.

"""
class ITopicTreeVisitor:
    """
    Derive from ITopicTreeVisitor and override one or more of the
    self._*() methods. Give an instance to an instance of
    TopicTreeTraverser.
    """
    ...


class TreeTraversal(IntEnum):
    """MAP is sequential through topic manager\'s topics map; the other two, through topic tree."""
    ...


class TopicTreeTraverser:
    """
    Supports taking action on every topic in the topic tree. The traverse() method
    traverses a topic tree and calls visitor._onTopic() for each topic in the tree
    that satisfies visitor._accept(). Additionally it calls visitor._startChildren()
    whenever it starts traversing the subtopics of a topic, and
    visitor._endChildren() when it is done with the subtopics. Finally, it calls
    visitor._doneTraversal() when traversal has been completed. The visitor must
    therefore adhere to the ITopicTreeVisitor interface.
    """
    def __init__(self, visitor: ITopicTreeVisitor = ...) -> None:
        """The visitor, if given, must adhere to API of ITopicTreeVisitor."""
        ...
    
    def setVisitor(self, visitor: ITopicTreeVisitor): # -> None:
        """The visitor must adhere to API of ITopicTreeVisitor."""
        ...
    
    def traverse(self, topicObj: Topic, how: TreeTraversal = ..., onlyFiltered: bool = ...): # -> None:
        """
        Start traversing tree at topicObj. Note that topicObj is a
        Topic object, not a topic name. The how defines if tree should
        be traversed breadth or depth first. If onlyFiltered is
        False, then all nodes are accepted (_accept(node) not called).

        This method can be called multiple times.
        """
        ...
    


