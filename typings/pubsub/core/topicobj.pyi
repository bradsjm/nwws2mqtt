"""
This type stub file was generated by pyright.
"""

from typing import Callable, Iterator, List, Sequence, Tuple, Union, ValuesView
from .listener import CallArgsInfo, Listener, UserListener
from .topicargspec import ArgsDocs, ArgsInfo, MsgData
from .annotations import annotationType

"""
Provide the Topic class.

:copyright: Copyright since 2006 by Oliver Schoenborn, all rights reserved.
:license: BSD, see LICENSE_BSD_Simple.txt for details.
"""
@annotationType
class Topic:
    ...


@annotationType
class TreeConfig:
    ...


ListenerFilter = Callable[[Listener], bool]
class Topic:
    """
    Represent topics in pubsub. Contains information about a topic,
    including topic's message data specification (MDS), the list of
    subscribed listeners, docstring for the topic. It allows Python-like
    access to subtopics (e.g. A.B is subtopic B of topic A).
    """
    def __init__(self, treeConfig: TreeConfig, nameTuple: Tuple[str, ...], description: str, msgArgsInfo: ArgsInfo, parent: Topic = ...) -> None:
        """
        Create a topic. Should only be called by TopicManager via its
        getOrCreateTopic() method (which gets called in several places
        in pubsub, such as sendMessage, subscribe, and newTopic).

        :param treeConfig: topic tree configuration settings
        :param nameTuple: topic name, in tuple format (no dots)
        :param description: "docstring" for topic
        :param ArgsInfo msgArgsInfo: object that defines MDS for topic
        :param parent: parent of topic

        :raises ValueError: invalid topic name
        """
        ...
    
    def setDescription(self, desc: str): # -> None:
        """Set the 'docstring' of topic"""
        ...
    
    def getDescription(self) -> str:
        """Return the 'docstring' of topic"""
        ...
    
    def setMsgArgSpec(self, argsDocs: ArgsDocs, required: Sequence[str] = ...): # -> None:
        """
        Specify the message data for topic messages.
        :param argsDocs: a dictionary of keyword names (message data name) and data 'docstring'; cannot be None
        :param required: a list of those keyword names, appearing in argsDocs,
        which are required (all others are assumed optional)

        Can only be called if this info has not been already set at construction
        or in a previous call.
        :raise RuntimeError: if MDS already set at construction or previous call.
        """
        ...
    
    def getArgs(self) -> Tuple[Sequence[str], Sequence[str]]:
        """
        Returns a pair (reqdArgs, optArgs) where reqdArgs is tuple
        of names of required message arguments, optArgs is tuple
        of names for optional arguments. If topic args not specified
        yet, returns (None, None).
        """
        ...
    
    def getArgDescriptions(self) -> ArgsDocs:
        """Get a map of keyword names to docstrings: documents each MDS element. """
        ...
    
    def setArgDescriptions(self, **docs: ArgsDocs): # -> None:
        """Set the docstring for each MDS datum."""
        ...
    
    def hasMDS(self) -> bool:
        """Return true if this topic has a message data specification (MDS)."""
        ...
    
    def filterMsgArgs(self, msgData: MsgData, check: bool = ...) -> MsgData:
        """Get the MDS docstrings for each of the spedified kwargs."""
        ...
    
    def isAll(self) -> bool:
        """
        Returns true if this topic is the 'all topics' topic. All root
        topics behave as though they are child of that topic.
        """
        ...
    
    def isRoot(self) -> bool:
        """
        Returns true if this is a "root" topic, false otherwise. A
        root topic is a topic whose name contains no dots and which
        has pub.ALL_TOPICS as parent.
        """
        ...
    
    def getName(self) -> str:
        """Return dotted form of full topic name"""
        ...
    
    def getNameTuple(self) -> Tuple[str, ...]:
        """Return tuple form of full topic name"""
        ...
    
    def getNodeName(self) -> str:
        """Return the last part of the topic name (has no dots)"""
        ...
    
    def getParent(self) -> Topic:
        """
        Get Topic object that is parent of self (i.e. self is a subtopic
        of parent). Return none if self is the "all topics" topic.
        """
        ...
    
    def hasSubtopic(self, name: str = ...) -> bool:
        """
        Return true only if name is a subtopic of self. If name not
        specified, return true only if self has at least one subtopic.
        """
        ...
    
    def getSubtopic(self, relName: Union[str, Tuple[str, ...]]) -> Topic:
        """
        Get the specified subtopic object. The relName can be a valid
        subtopic name, a dotted-name string, or a tuple.
        """
        ...
    
    def getSubtopics(self) -> ValuesView[Topic]:
        """Get a list of Topic instances that are subtopics of self."""
        ...
    
    def getNumListeners(self) -> int:
        """
        Return number of listeners currently subscribed to topic. This is
        different from number of listeners that will get notified since more
        general topics up the topic tree may have listeners.
        """
        ...
    
    def hasListener(self, listener: UserListener) -> bool:
        """Return true if listener is subscribed to this topic."""
        ...
    
    def hasListeners(self) -> bool:
        """
        Return true if there are any listeners subscribed to
        this topic, false otherwise.
        """
        ...
    
    def getListeners(self) -> List[Listener]:
        """
        Get a copy of list of listeners subscribed to this topic. Safe to iterate over while listeners
        get un/subscribed from this topics (such as while sending a message).
        """
        ...
    
    def getListenersIter(self) -> Iterator[Listener]:
        """
        Get an iterator over listeners subscribed to this topic. Do not use if listeners can be
        un/subscribed while iterating.
        """
        ...
    
    def validate(self, listener: UserListener, curriedArgNames: Sequence[str] = ...) -> CallArgsInfo:
        """
        Checks whether listener could be subscribed to this topic:
        if yes, just returns; if not, raises ListenerMismatchError.
        Note that method raises TopicDefnError if self not
        hasMDS().
        """
        ...
    
    def isValid(self, listener: UserListener, curriedArgNames: Sequence[str] = ...) -> bool:
        """
        Return True only if listener could be subscribed to this topic,
        otherwise returns False. Note that method raises TopicDefnError
        if self not hasMDS().
        """
        ...
    
    def subscribe(self, listener: UserListener, **curriedArgs) -> Tuple[Listener, bool]:
        """
        Subscribe listener to this topic. Returns a pair (pub.Listener, success).

        :param curriedArgs: keyword argument to curry the listener arguments at message time; the listener(args) is
            treated essentially as ``listener(**(args - curriedArgs))``. If the listener was already subscribed,
            the pure curried args names (curriendArgs.keys() - _overrides_) must be unchanged.
        :return: True only if listener was not already subscribed; False if it was already subscribed.
        """
        ...
    
    def unsubscribe(self, listener: UserListener) -> Listener:
        """
        Unsubscribe the specified listener from this topic. Returns
        the pub.Listener object associated with the listener that was
        unsubscribed, or None if the specified listener was not
        subscribed to this topic.  Note that this method calls
        ``notifyUnsubscribe(listener, self)`` on all registered notification
        handlers (see pub.addNotificationHandler).
        """
        ...
    
    def unsubscribeAllListeners(self, filter: ListenerFilter = ...) -> List[Listener]:
        """
        Clears list of subscribed listeners. If filter is given, it must
        be a function that takes a listener and returns true if the listener
        should be unsubscribed. Returns the list of Listener for listeners
        that were unsubscribed.
        """
        ...
    
    def publish(self, **msgData): # -> None:
        """
        This sends message to listeners of parent topics as well.
        If an exception is raised in a listener, the publish is
        aborted, except if there is a handler (see
        pub.setListenerExcHandler).

        Note that it is important that the PublisherMixin NOT modify any
        state data during message sending, because in principle it could
        happen that a listener causes another message of same topic to be
        sent (presumably, the listener has a way of preventing infinite
        loop).
        """
        ...
    
    name = ...
    parent = ...
    subtopics = ...
    description = ...
    listeners = ...
    numListeners = ...
    args = ...
    argDescriptions = ...
    def __str__(self) -> str:
        ...
    


