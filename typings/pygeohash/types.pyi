"""
This type stub file was generated by pyright.
"""

import re
import pandas as pd
from typing import Collection, Dict, Final, List, Literal, TYPE_CHECKING, Tuple, TypeVar, Union
from pandas import DataFrame, Series

"""Type definitions for the pygeohash library.

This module provides a centralized location for all type definitions used
throughout the pygeohash library. It includes both the core types for
coordinates and bounding boxes, as well as type aliases for commonly used
parameter types.
"""
_HAS_NUMPY: bool = ...
_HAS_PANDAS: bool = ...
if TYPE_CHECKING:
    _HAS_NUMPY = ...
    _HAS_PANDAS = ...
else:
    ...
logger = ...
T = TypeVar("T")
Geohash = str
Latitude = float
Longitude = float
Coordinate = Tuple[float, float]
_GEOHASH_PATTERN: Final[re.Pattern] = ...
if TYPE_CHECKING:
    GeohashArray = ...
    LatitudeArray = ...
    LongitudeArray = ...
else:
    ...
def is_valid_geohash(value: Union[str, object]) -> bool:
    """Validate if a string is a valid geohash.

    Args:
        value: String to validate

    Returns:
        bool: True if valid geohash, False otherwise
    """
    ...

def is_valid_latitude(value: Union[float, int, object]) -> bool:
    """Validate if a number is a valid latitude.

    Args:
        value: Number to validate

    Returns:
        bool: True if valid latitude, False otherwise
    """
    ...

def is_valid_longitude(value: Union[float, int, object]) -> bool:
    """Validate if a number is a valid longitude.

    Args:
        value: Number to validate

    Returns:
        bool: True if valid longitude, False otherwise
    """
    ...

def assert_valid_geohash(value: str) -> Geohash:
    """Assert that a value is a valid geohash and return it typed.

    Args:
        value: Value to validate

    Returns:
        Geohash: The validated geohash

    Raises:
        ValueError: If value is not a valid geohash
    """
    ...

def assert_valid_latitude(value: Union[float, int]) -> Latitude:
    """Assert that a value is a valid latitude and return it typed.

    Args:
        value: Value to validate

    Returns:
        Latitude: The validated latitude

    Raises:
        ValueError: If value is not a valid latitude
    """
    ...

def assert_valid_longitude(value: Union[float, int]) -> Longitude:
    """Assert that a value is a valid longitude and return it typed.

    Args:
        value: Value to validate

    Returns:
        Longitude: The validated longitude

    Raises:
        ValueError: If value is not a valid longitude
    """
    ...

def is_geohash_series(obj: object) -> bool:
    """Check if object is a pandas Series of geohashes."""
    ...

def is_latitude_series(obj: object) -> bool:
    """Check if object is a pandas Series of latitudes."""
    ...

def is_longitude_series(obj: object) -> bool:
    """Check if object is a pandas Series of longitudes."""
    ...

def is_geohash_dataframe(obj: object) -> bool:
    """Check if object is a DataFrame with geohash columns."""
    ...

Direction = Literal["right", "left", "top", "bottom"]
EARTH_RADIUS: Final[float] = ...
PRECISION_TO_ERROR: Final[Dict[int, float]] = ...
GeohashCollection = Collection[str]
GeohashList = List[str]
if TYPE_CHECKING:
    GeohashSeriesType = TypeVar("GeohashSeriesType", bound="pd.Series[str]")
    LatitudeSeriesType = TypeVar("LatitudeSeriesType", bound="pd.Series[float]")
    LongitudeSeriesType = TypeVar("LongitudeSeriesType", bound="pd.Series[float]")
    GeohashDataFrameType = TypeVar("GeohashDataFrameType", bound="pd.DataFrame")
    GeohashDataFrame = DataFrame
else:
    ...
__all__ = ["LatLong", "ExactLatLong", "BoundingBox", "T", "Geohash", "Latitude", "Longitude", "is_valid_geohash", "is_valid_latitude", "is_valid_longitude", "assert_valid_geohash", "assert_valid_latitude", "assert_valid_longitude", "Direction", "GeohashPrecision", "EARTH_RADIUS", "PRECISION_TO_ERROR", "GeohashCollection", "GeohashList", "GeohashArray", "LatitudeArray", "LongitudeArray", "GeohashSeries", "LatitudeSeries", "LongitudeSeries", "GeohashDataFrame"]
