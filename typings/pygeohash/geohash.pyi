"""
This type stub file was generated by pyright.
"""

from typing import Dict
from pygeohash.geohash_types import ExactLatLong, GeohashPrecision, LatLong

"""Geohash encoding and decoding functionality.

This module provides the core functionality for encoding coordinates to geohashes
and decoding geohashes back to coordinates. It includes both standard and exact
decoding options, as well as strict encoding.

This implementation uses a high-performance C extension for all operations.
"""
logger = ...
__base32 = ...
__decodemap: Dict[str, int] = ...
MIN_PRECISION = ...
MAX_PRECISION = ...
def encode(latitude: float, longitude: float, precision: GeohashPrecision = ...) -> str:
    """Encode a latitude and longitude into a geohash.

    Args:
        latitude (float): The latitude to encode.
        longitude (float): The longitude to encode.
        precision (GeohashPrecision, optional): The number of characters in the geohash.
            Defaults to 12. Must be between 1 and 12, inclusive.

    Returns:
        str: The geohash string.

    Raises:
        ValueError: If the precision is not an integer or is outside the valid range (1-12).
    """
    ...

def encode_strictly(latitude: float, longitude: float, precision: GeohashPrecision = ...) -> str:
    """Encode a latitude and longitude into a geohash with strict validation.

    This function performs additional validation on the input coordinates
    before encoding them into a geohash.

    Args:
        latitude (float): The latitude to encode.
        longitude (float): The longitude to encode.
        precision (GeohashPrecision, optional): The number of characters in the geohash.
            Defaults to 12. Must be between 1 and 12, inclusive.

    Returns:
        str: The geohash string.

    Raises:
        ValueError: If the latitude or longitude values are invalid, or if the precision is not an integer
            or is outside the valid range (1-12).
    """
    ...

def decode(geohash: str) -> LatLong:
    """Decode a geohash into a latitude and longitude.

    Args:
        geohash (str): The geohash string to decode.

    Returns:
        LatLong: A named tuple containing the latitude and longitude.

    Raises:
        ValueError: If the geohash is not a string, is empty, or contains invalid characters.
    """
    ...

def decode_exactly(geohash: str) -> ExactLatLong:
    """Decode a geohash into a latitude and longitude with error margins.

    This function provides more detailed information than the standard decode
    function by including the error margins for both latitude and longitude.

    Args:
        geohash (str): The geohash string to decode.

    Returns:
        ExactLatLong: A named tuple containing the latitude, longitude, and their
            respective error margins.

    Raises:
        ValueError: If the geohash is not a string, is empty, or contains invalid characters.
    """
    ...

__all__ = ["decode", "decode_exactly", "encode", "encode_strictly", "LatLong", "ExactLatLong", "__base32", "__decodemap"]
